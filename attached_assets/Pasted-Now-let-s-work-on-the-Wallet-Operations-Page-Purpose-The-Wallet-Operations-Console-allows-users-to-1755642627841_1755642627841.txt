Now let's work on the Wallet Operations Page
Purpose
The Wallet Operations Console allows users to manage multiple Solana wallets for trading, sniping, and deploying tokens. It’s a central hub for:

Creating new wallets (up to 100, including burners for privacy).
Importing existing wallets securely.
Exporting wallet data (public keys, labels) for backup.
Transferring SOL or SPL tokens to single recipients.
Multisending SOL/SPL to multiple recipients in one transaction.
Additional Features: Checking balances, requesting airdrops (devnet only), funding managed wallets from the main wallet, and deleting wallets.
Integration with Deploy Console: Managed wallets are available for selection in the Deploy Console for multi-wallet bundling (e.g., launch + initial buys for stealth/volume).

Key Components and Workflow
The console is a single page with a responsive, dark-themed UI (black background, gold accents, TailwindCSS). It features forms for each action, a wallet list table, and integrates with Supabase for storage, Helius for balance checks, and @solana/web3.js for transactions.

Wallet List (Table View):

Display: Shows all managed wallets (up to 100) stored in Supabase (wallets table: { user_wallet: string, pubkey: string, label: string, is_burner: boolean }).
Columns: Public key (truncated, e.g., 3xK7...aB9c), label (user-defined, e.g., “Main Trading”), balance (fetched via Helius API in SOL), burner status (Yes/No), actions (Delete, Airdrop, Fund).
Real-Time Updates: Balances update via Helius getBalance API on load and after actions (e.g., transfers). Supabase subscriptions refresh the list on changes (e.g., new wallet added).
UX: Sortable table, clickable pubkeys to copy, and action buttons for quick operations. Loading states (spinners) during API calls.


Create Wallets:

Form: Input field for number of wallets (1–100). Button to submit.
Functionality: Generates new Keypairs using @solana/web3.js (Keypair.generate()). Stores public keys, labels (e.g., “Wallet 1”), and is_burner: true in Supabase. Private keys are shown once in a toast notification (base64 format) with a prompt to save securely (e.g., download as text or copy manually).
Security: Private keys are never stored in the app or Supabase. Users are advised to use burners for deploys/sniping to enhance privacy (anonymize on-chain activity).
Use Case: Create 10 burner wallets for a multi-wallet deploy in the Deploy Console to simulate volume.


Import Wallet:

Form: Inputs for private key (base64, e.g., from Phantom export), optional label, and checkbox for “Is Burner?”.
Functionality: Validates the private key (Keypair.fromSecretKey), extracts public key, and stores { pubkey, label, is_burner } in Supabase tied to the user’s main wallet (publicKey.toBase58()). Clears input after success to avoid exposure.
Security: Private key is processed client-side and discarded; no server storage. Error handling for invalid keys (toast: “Invalid private key”).
Use Case: Import a wallet from another app (e.g., Phantom) to use for trading or deploys.


Export Wallets:

Functionality: Button to download a CSV file containing all managed wallets (pubkey, label, is_burner). No private keys are exported (users must have saved them during creation/import).
Implementation: Uses JavaScript Blob and URL.createObjectURL to generate a downloadable file (wallets.csv).
Security: Only public data is exported, minimizing risk. Toast confirms: “Wallets exported (pubkeys only; priv keys not stored).”
Use Case: Backup wallet list or share with another tool.


Transfer SOL/SPL Tokens:

Form: Dropdown to select from managed wallets (populated from Supabase), input for recipient public key, amount (in SOL or token units), optional token mint address (for SPL tokens, e.g., USDC).
Functionality: Builds a transaction using @solana/web3.js:

SOL: SystemProgram.transfer (amount in lamports).
SPL: getOrCreateAssociatedTokenAccount and createTransferInstruction (adjust decimals per token).
Prompts for signing (main wallet via wallet-adapter or input private key for selected wallet—temporary, cleared after).


Security: Hardware wallet signing advised (Ledger/Trezor via wallet-adapter). Private key input (if used) is client-side and cleared. Toast shows Solscan link for tx confirmation.
Use Case: Send 0.5 SOL from a managed wallet to a friend or 1000 USDC to an exchange.


Multisend SOL/SPL:

Form: Dropdown for sender wallet, dynamic list of recipients (add/remove fields: toPubkey, amount), optional token mint.
Functionality: Constructs a single transaction with multiple transfer instructions (SOL or SPL). Signs with sender’s key (prompt for priv key or hardware). Sends via connection.sendRawTransaction.
Security: Same as transfer (hardware signing, no persistent keys). Rate-limit multisend to prevent abuse (e.g., max 50 recipients).
Use Case: Distribute 0.1 SOL to 10 managed wallets for deploy bundling.


Additional Features:

Balance Check: Fetches SOL balances for all wallets on load/refresh using Helius getBalance API. Displays in table (e.g., “2.3456 SOL”). Future: Add SPL token balances via Helius getAssetsByOwner.
Airdrop (Devnet): Button per wallet to request 1 SOL airdrop (connection.requestAirdrop). Disabled on mainnet; toast warns: “Airdrop only on devnet.”
Fund from Main Wallet: Button to send 0.1 SOL from the connected wallet (via wallet-adapter) to a managed wallet. Useful for topping up burners for deploys.
Delete Wallet: Button to remove a wallet from Supabase (prompt for confirmation to avoid accidents).
UX Enhancements: Search/filter wallets by label/pubkey, tag wallets (e.g., “Trading”, “Deploy”), and export tx history (Helius getSignaturesForAddress).


Integration with Deploy Console:

Wallet Fetching: On load, Deploy Console queries Supabase (wallets table, filtered by user_wallet) to populate a multi-select dropdown or checkboxes for bundling.
Multi-Wallet Bundling: In Deploy, users select managed wallets (e.g., 5 burners) for post-launch buys. Deploy Console:

Creates token via PumpPortal (/api/trade?action=create, pool: ‘pump’ or ‘bonk’).
Generates buy tx per selected wallet (PumpPortal /api/trade-local for client-side signing).
Bundles all tx (launch + buys) with Jito (@jito-solana/bundle-sdk) for atomic execution.


Security/Privacy: Prompts for private keys only during bundling (cleared after); advises burners (generate in Wallet Ops via PumpPortal /create-wallet). Hardware signing for main wallet. VPN advised for API calls.
Rewards: Increments Supabase points (e.g., 100 + 20 per bundled wallet) on success.


Security and Privacy:

No Private Key Storage: Private keys are never stored in Supabase or the app. Creation/import shows keys once (toast/download); bundling prompts temporary input.
Hardware Wallet Prompts: Use @solana/wallet-adapter for main wallet signing (Ledger/Trezor). For managed wallets, users input priv keys or use burners.
Burner Wallets: Generate via PumpPortal /create-wallet (GET, returns pubkey/privkey) or Keypair.generate(). Marked is_burner: true in Supabase. Advised for deploys/sniping to anonymize activity.
VPN Advice: Toast notification on page load: “Use a VPN (e.g., ProtonVPN) for privacy during trading.”
Supabase Security: Row-level security (RLS) ensures users only see their wallets (user_wallet = auth.uid()). Encrypt labels if sensitive.
Rate Limits: Limit multisend to 50 recipients; cap wallet creation at 100 per user to prevent abuse.


User Workflow Example

User Logs In: Via Solana wallet, Google, or email (from landing page).
Navigates to Wallet Ops: Sidebar → “Wallet Operations.”
Creates Wallets: Enters “5” in Create form → Generates 5 burners, sees toast with priv keys (“Save securely!”), wallets added to Supabase and table.
Imports Wallet: Pastes Phantom priv key, labels “Main Trading,” checks “Not Burner.” Added to list.
Checks Balances: Table shows SOL balances (e.g., “0.1234 SOL”) via Helius.
Funds Burner: Clicks “Fund 0.1 SOL” on a burner wallet; signs with main wallet (Ledger prompt).
Transfers: Selects a wallet, enters recipient pubkey and SOL amount, submits. Signs (input priv key or hardware), sees Solscan link.
Multisends: Adds recipients (pubkey,+ SOL amount each ), submits, signs once, distributes SOL.
Deploys Token: Goes to Deploy Console, selects burners from Wallet Ops list for bundling. Launches token; buys executed atomically via Jito. Points awarded.
Exports: Downloads CSV of all wallets for backup.

Integration with Deploy Console

Wallet Selection: Deploy Console fetches wallets from Supabase (same wallets table) into a checkbox list. Users pick burners for bundling (e.g., launch + 3 buys of 0.01 SOL each).
Bundling Process: Deploy Console uses PumpPortal /api/trade-local for buy tx (each wallet signs separately—prompt priv keys or hardware). Jito bundles launch + buys for atomicity, preventing front-running.
Privacy: Burners (generated in Wallet Ops) anonymize buys. Toast: “Use burners for deploy privacy; enable VPN.”
Rewards: Supabase tracks points (e.g., 100 for deploy, +20 per bundled wallet