Generate a complete, updated code for the Deploy Console component (`/app/deploy/page.tsx`) in the Caesarbot Console Next.js application, making it fully functional for launching tokens on Pump.fun and LetsBonk.fun using the PumpPortal API (based on latest 2025 docs from pumpportal.fun). Use Lightning mode for simplicity (server-side via API key, with user-funded linked wallet), but include a note for switching to Local mode in production for security (client-side signing). Support bundling via Jito (@jito-solana/bundle-sdk) for multi-wallet deploys (atomic launch + initial buys from multiple wallets for stealth/volume simulation).

Workflow:
1. User Input: Form for name, symbol, logo file, description, socials (twitter, telegram), website, type (meme/tech). Select launchpad (Pump.fun or LetsBonk.fun). Dev buy amount (SOL), slippage, priority fee. Optional multi-wallets (input private keys or generate burners via PumpPortal's create-wallet endpoint; advise using burners for privacy).
2. Validation & Preset: Use Zod with React Hook Form for validation; handle errors. Save presets to Supabase (per launchpad/user wallet).
3. Metadata Upload: Upload logo to IPFS via PumpPortal's /upload/img endpoint. Generate metadata JSON (name, symbol, description, twitter, telegram, website, image URI) and upload to /upload/meta.
4. Token Creation: Generate mint keypair client-side. POST to PumpPortal /api/trade?api-key=... with action: 'create', tokenMetadata (uri from upload), mint (public key), denominatedInSol: true, amount (dev buy), slippage, priorityFee, pool ('pump' for Pump.fun, 'bonk' for LetsBonk.fun).
5. Bundling Wallets/Tx: If multi-wallets provided: Post-launch, generate buy tx for each (using PumpPortal /api/trade-local for client-side, or Lightning if funded). Bundle all with Jito for atomic execution (prevents front-running).
6. Quality Check & Auto-Post: Post-launch, check contract via RugCheck API (GET /tokens/{mint}/report). Auto-post to X via /api/twitter/post route (implement placeholder with twitter-sdk).
7. Rewards: Increment points in Supabase on success (update users table).
8. Error/Loading: Handle states with react-hot-toast notifications; confirm tx via Solscan link in toast.
9. Security/Privacy: Prompt for hardware wallet signing; advise VPN and burner wallets (generate via PumpPortal /create-wallet GET, which returns new wallet keys). Never store private keys persistently.

Prerequisites:
- Add to .env: PUMPPORTAL_API_KEY (from pumpportal.fun ).
- Install deps if missing: npm install react-hook-form zod @hookform/resolvers react-hot-toast @jito-solana/bundle-sdk.
- Full UI: Responsive form with inputs, selects, file upload, dynamic multi-wallet fields (add/remove), submit button, loading spinner.

Include any necessary API routes . Ensure code is complete, error-handled, and ready to integrate. Test logic on devnet (add toggle).