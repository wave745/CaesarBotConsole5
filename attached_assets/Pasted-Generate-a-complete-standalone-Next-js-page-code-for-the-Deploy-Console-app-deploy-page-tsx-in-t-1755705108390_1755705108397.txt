Generate a complete, standalone Next.js page code for the Deploy Console (/app/deploy/page.tsx) in the Caesarbot Console application, making it fully functional for launching tokens on Pump.fun and LetsBonk.fun using the PumpPortal API (based on latest 2025 docs from pumpportal.fun). **Use live data only – no mocks, static lists, or hardcoded data anywhere. All wallets must be fetched live from Supabase 'wallets' table (select/eq where user_wallet = current_user.wallet, realtime postgres_changes subscriptions for sync with Wallet Operations). Burner wallets (is_burner: true, created in Wallet Operations) are prioritized for bundling; dev wallet can be any wallet for token creation.** Use Lightning mode for simplicity (server-side via API key, user-funded linked wallet), but include a comment for switching to Local mode in production for security (client-side signing). Support bundling via Jito (@jito-solana/bundle-sdk) for multi-wallet deploys (atomic launch + initial buys from up to 5 burner wallets for stealth/volume simulation).

Workflow:
- User Input: Form for name (max 32 chars), symbol (max 8 chars), logo file (JPEG/PNG/GIF/SVG, max 2MB), description (min 10, max 1000 chars), socials (twitter, telegram, website URLs, optional), type (meme/tech), launchpad (Pump.fun/LetsBonk.fun), devBuyAmount (0.1-10 SOL), slippage (0-50%), priorityFee (0.00001-0.1 SOL). Dev wallet dropdown (live Supabase fetch, any wallet), bundling wallets checkboxes (live Supabase fetch, prioritize is_burner: true, max 5).
- Validation & Preset: Zod with React Hook Form for validation; red error text. Save presets to Supabase (live insert to 'presets' table, user_wallet = current_user.wallet).
- Metadata Upload: Upload logo to IPFS via PumpPortal's /upload/img (live POST, no mock URIs). Generate metadata JSON (name, symbol, description, twitter, telegram, website, image URI) and upload to /upload/meta (live POST).
- Token Creation: Generate mint keypair client-side (@solana/web3.js). POST to PumpPortal /api/trade?api-key=... with action: 'create', tokenMetadata (uri from upload), mint (public key), denominatedInSol: true, amount (devBuyAmount), slippage, priorityFee, pool ('pump' for Pump.fun, 'bonk' for LetsBonk.fun) - live call, use devnet RPC (api.devnet.solana.com) if toggled.
- Bundling: If bundling wallets selected (burners preferred): Generate buy tx per wallet (PumpPortal /api/trade-local, live GET, no mock tx, amount 0.01 SOL default). Bundle with Jito for atomic execution (live POST to JITO_RPC, no mock bundles).
- Quality Check & Auto-Post: Post-launch, check contract via RugCheck API (live GET /tokens/{mint}/report, no mock scores). Auto-post to X via /api/twitter/post (live tweet with twitter-api-v2, no mock posts).
- Rewards: Increment points in Supabase (live update to 'users' table, 100 + 20 per bundled wallet, no mock points).
- Error/Loading: Handle with react-hot-toast (Solscan links, e.g., https://solscan.io/tx/{sig}?cluster=devnet for devnet). Show red errors for validation/API failures.
- Security/Privacy: Prompt hardware wallet signing (Ledger/Trezor via @solana/wallet-adapter). Advise VPN (toast: "Use VPN for privacy") and burners (from Wallet Operations, is_burner: true). Never store private keys; temporary priv input for bundling (cleared after).
- Scalability: Optimize for 1000+ users (stagger Helius calls with 50ms delay, cache balances in Zustand, Socket.io for broadcasting wallet updates if needed).

Prerequisites:
- Supabase tables: 'wallets' ({ user_wallet: text, pubkey: text primary_key, label: text, is_burner: boolean, token_balances: json }), 'presets' ({ user_wallet: text, launchpad: text, config: json }), 'users' ({ wallet: text primary_key, points: number }). Enable RLS: user_wallet = auth.uid().
- Add to .env: PUMPPORTAL_API_KEY (from pumpportal.fun), HELIUS_API_KEY, RUGCHECK_API_KEY, JITO_RPC[](https://mainnet.jito.bundle), TWITTER_APP_KEY, TWITTER_APP_SECRET, TWITTER_ACCESS_TOKEN, TWITTER_ACCESS_SECRET.
- Install deps: npm install react-hook-form zod @hookform/resolvers react-hot-toast @jito-solana/bundle-sdk axios twitter-api-v2 @solana/web3.js @solana/wallet-adapter-react @solana/wallet-adapter-react-ui @helius/sdk.
- UI: Responsive form (stack on mobile), dark theme (bg-black text-yellow-400), Framer Motion for glowing hovers, devnet toggle checkbox (switch RPC to api.devnet.solana.com).

Include API route: /api/twitter/post (live tweet with twitter-api-v2). Ensure code is complete, error-handled, and ready to integrate. Test logic on devnet (live airdrops/funds for dev wallet). **No mocks – all wallet fetch/save/use from live Supabase queries (select/eq, insert, update, postgres_changes subscriptions for sync with Wallet Operations, refetch on create/import); PumpPortal, Helius, RugCheck calls live (throw errors if not live); balances from Helius getBalance; throw errors if data isn't saved/fetched live or sync fails. Burner wallets (is_burner: true) from Wallet Operations prioritized for bundling.**